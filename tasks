<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <title>Smart Task Tracker</title>
  <style>
    body { font-family: Arial; margin: 40px; background: #f4f4f4; }
    form { background: #fff; padding: 20px; border-radius: 5px; max-width: 700px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); margin-bottom: 30px; }
    .form-grid { display: flex; flex-wrap: wrap; gap: 20px; }
    .form-group { flex: 1 1 300px; display: flex; flex-direction: column; }
    .form-group.full-width { flex: 1 1 100%; }
    label { margin-bottom: 5px; font-weight: 500; }
    select, input[type="date"], textarea { padding: 8px; border:1px solid #ccc; border-radius:3px; }
    #dropZone { border:2px dashed #bbb; padding:20px; text-align:center; background:#f9f9f9; cursor:pointer; }
    #dropZone.dragover { background:#eef; }
    .preview-area { display:flex; flex-wrap: wrap; margin-top:10px; }
    .preview-item { position: relative; margin-right:10px; margin-bottom:10px; }
    .preview-item img { max-width:100px; max-height:100px; border:1px solid #ccc; border-radius:3px; }
    .remove-img { position:absolute; top:-8px; right:-8px; background:red; color:#fff; border-radius:50%; width:20px; height:20px; text-align:center; line-height:20px; cursor:pointer; font-size:14px; }
    table { width:100%; border-collapse: collapse; background: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
    th, td { border:1px solid #ddd; padding:12px; text-align:left; vertical-align:middle; }
    .task-img { max-width:60px; max-height:60px; margin-right:5px; border-radius:3px; }
    .delete-btn { color:red; cursor:pointer; }
    .edit-btn { color:green; cursor:pointer; margin-right:8px; }
    .button-group { margin-top:20px; }
    button { padding:10px 18px; background:#007BFF; color:#fff; border:none; border-radius:4px; cursor:pointer; }
    button:hover { background:#0056b3; }
    button.danger { background:#dc3545; margin-left:10px; }
    .stats { margin-bottom:20px; }
  </style>
</head>
<body>

<h2>Add / Edit Task</h2>
<form id="taskForm">
  <div class="form-grid">
    <div class="form-group">
      <label for="subject">Subject</label>
      <select id="subject" required>
        <option value="" disabled selected>Select subject</option>
        <option value="PODF">PODF</option>
        <option value="DSCA">DSCA</option>
        option value="DT">DT</option>
          <option value="WP">WP</option>
          <option value="ESS">ESS</option>
          <option value="APS">APS</option>
          <option value="DSA">DSA</option>
          <option value="CYSE">CYSE</option>
          <option value="AEM">AEM</option>
          <option value="IT">IT</option>
          <option value="FOUNDATIONS">FOUNDATIONS</option>
        <!-- Add more as needed -->
      </select>
    </div>
    <div class="form-group">
      <label for="type">Type</label>
      <select id="type" required>
        <option value="" disabled selected>Select type</option>
        <option value="Assignment">Assignment</option>
        <option value="Lab">Lab</option>
        <option value="Project">Project</option>
        <option value="Notes">Notes</option>
        <option value="QUIZ/TEST">QUIZ/TEST</option>
        <option value="INTERNAL EXAM">INTERNAL EXAM</option>
        <option value="EXTERNAL EXAM">EXTERNAL EXAM</option>
      </select>
    </div>
    <div class="form-group full-width">
      <label for="details">What needs to be done?</label>
      <textarea id="details" rows="2" required></textarea>
    </div>
    <div class="form-group full-width">
      <label>Paste or Drag & Drop Images</label>
      <div id="dropZone">Drop or paste images here</div>
      <div id="previewArea" class="preview-area"></div>
    </div>
    <div class="form-group">
      <label for="dueDate">Due Date</label>
      <input type="date" id="dueDate" required />
    </div>
    <div class="form-group">
      <label for="status">Status</label>
      <select id="status" required>
        <option value="Pending">Pending</option>
        <option value="Under Progress">Under Progress</option>
        <option value="Completed">Completed</option>
      </select>
    </div>
  </div>
  <div class="button-group">
    <button type="submit" id="saveBtn">Add Task</button>
    <button type="button" id="cancelEditBtn" class="danger" style="display:none;">Cancel Edit</button>
  </div>
</form>

<div class="stats">
  <div>Total: <span id="total">0</span></div>
  <div>Pending: <span id="pending">0</span></div>
  <div>Under Progress: <span id="progress">0</span></div>
  <div>Completed: <span id="completed">0</span></div>
</div>

<table>
  <thead>
    <tr><th>Subject</th><th>Type</th><th>Details</th><th>Images</th><th>Due Date</th><th>Status</th><th>Actions</th></tr>
  </thead>
  <tbody id="taskTable"></tbody>
</table>

<script>
let tasks = JSON.parse(localStorage.getItem('tasks') || '[]');
let currentImages = [];
let editIndex = null;

const form = document.getElementById('taskForm');
const dropZone = document.getElementById('dropZone');
const previewArea = document.getElementById('previewArea');
const cancelEditBtn = document.getElementById('cancelEditBtn');
const saveBtn = document.getElementById('saveBtn');

function renderPreview() {
  previewArea.innerHTML = '';
  currentImages.forEach((src, i) => {
    const div = document.createElement('div');
    div.className = 'preview-item';
    div.innerHTML = `<img src="${src}" alt="img"/><div class="remove-img" onclick="removeImage(${i})">Ã—</div>`;
    previewArea.appendChild(div);
  });
}
function removeImage(i) {
  currentImages.splice(i,1);
  renderPreview();
}
dropZone.addEventListener('dragover', e => { e.preventDefault(); dropZone.classList.add('dragover'); });
dropZone.addEventListener('dragleave', e => { e.preventDefault(); dropZone.classList.remove('dragover'); });
dropZone.addEventListener('drop', e => {
  e.preventDefault(); dropZone.classList.remove('dragover');
  for (let file of e.dataTransfer.files) {
    if (file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = () => { currentImages.push(reader.result); renderPreview(); };
      reader.readAsDataURL(file);
    }
  }
});
document.addEventListener('paste', e => {
  for (let item of e.clipboardData.items) {
    if (item.type.indexOf('image') !== -1) {
      const file = item.getAsFile();
      const reader = new FileReader();
      reader.onload = () => { currentImages.push(reader.result); renderPreview(); };
      reader.readAsDataURL(file);
    }
  }
});

form.onsubmit = e => {
  e.preventDefault();
  const task = {
    subject: form.subject.value,
    type: form.type.value,
    details: form.details.value,
    dueDate: form.dueDate.value,
    status: form.status.value,
    images: [...currentImages]
  };
  if (editIndex !== null) {
    tasks[editIndex] = task;
  } else {
    tasks.push(task);
  }
  localStorage.setItem('tasks', JSON.stringify(tasks));
  renderTasks();
  resetForm();
};
function resetForm() {
  form.reset();
  currentImages = [];
  editIndex = null;
  renderPreview();
  saveBtn.innerText = 'Add Task';
  cancelEditBtn.style.display = 'none';
}
cancelEditBtn.onclick = resetForm;

function renderTasks() {
  const table = document.getElementById('taskTable');
  table.innerHTML = '';
  let pending = 0, progress = 0, completed = 0;
  tasks.forEach((t, i) => {
    const tr = document.createElement('tr');
    const today = new Date().toISOString().split('T')[0];
    if (t.dueDate < today && t.status !== 'Completed') {
      tr.style.backgroundColor = '#ffe0e0';
    }
    tr.innerHTML = `
      <td>${t.subject}</td>
      <td>${t.type}</td>
      <td>${t.details}</td>
      <td>${t.images.map(img => `<img src="${img}" class="task-img">`).join('')}</td>
      <td>${t.dueDate}</td>
      <td>
        <select onchange="updateStatus(${i}, this.value)">
          <option${t.status==='Pending'?' selected':''}>Pending</option>
          <option${t.status==='Under Progress'?' selected':''}>Under Progress</option>
          <option${t.status==='Completed'?' selected':''}>Completed</option>
        </select>
      </td>
      <td>
        <span class="edit-btn" onclick="editTask(${i})">Edit</span>
        <span class="delete-btn" onclick="deleteTask(${i})">Delete</span>
      </td>`;
    table.appendChild(tr);
    if (t.status === 'Pending') pending++;
    else if (t.status === 'Under Progress') progress++;
    else if (t.status === 'Completed') completed++;
  });
  document.getElementById('total').innerText = tasks.length;
  document.getElementById('pending').innerText = pending;
  document.getElementById('progress').innerText = progress;
  document.getElementById('completed').innerText = completed;
}
window.editTask = i => {
  const t = tasks[i];
  form.subject.value = t.subject;
  form.type.value = t.type;
  form.details.value = t.details;
  form.dueDate.value = t.dueDate;
  form.status.value = t.status;
  currentImages = [...t.images];
  editIndex = i;
  renderPreview();
  saveBtn.innerText = 'Update Task';
  cancelEditBtn.style.display = 'inline-block';
};
window.deleteTask = i => {
  if (confirm('Are you sure you want to delete this task?')) {
    tasks.splice(i,1);
    localStorage.setItem('tasks', JSON.stringify(tasks));
    renderTasks();
  }
};
window.updateStatus = (i, newStatus) => {
  tasks[i].status = newStatus;
  localStorage.setItem('tasks', JSON.stringify(tasks));
  renderTasks();
};

renderTasks();
</script>
</body>
</html>
